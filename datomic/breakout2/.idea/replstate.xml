<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1445044841977">{:repl-history {:ide [], :local [&quot;(def uri \&quot;datomic:mem://localhost:4334/contacts\&quot;)&quot; &quot;(d/create-database uri)&quot; &quot;(def conn (d/connect uri))&quot; &quot;(d/transact\n    conn\n    (read-string (slurp (io/resource \&quot;data/schema.edn\&quot;))))&quot; &quot;(map\n    #(d/transact conn %)\n    (read-string\n      (slurp (io/resource \&quot;data/initial.edn\&quot;))))&quot; &quot;(defn full-names [db]\n    (d/q\n      '[:find ?e ?fn ?ln\n        :where\n        [?e :person/first-name ?fn]\n        [?e :person/last-name ?ln]]\n      db))&quot; &quot;(def db1 (d/db conn))&quot; &quot;(def eid (ffirst\n             (d/q '[:find ?e\n                    :in $ ?ln\n                    :where\n                    [?e :person/last-name ?ln]]\n                  db1 \&quot;Boguta\&quot;)))&quot; &quot;eid&quot; &quot;(d/transact\n    conn\n    [[:db/add eid :person/first-name \&quot;World Peace\&quot;]])&quot; &quot;(def db2 (d/db conn))&quot; &quot;(full-names db2)&quot; &quot;(full-names db1)&quot; &quot;(let [id (d/tempid :db.part/user)]\n    (d/transact\n      conn\n      [[:db/add id :person/first-name \&quot;Alan\&quot;]\n       [:db/add id :person/last-name \&quot;Turing\&quot;]]))&quot; &quot;(let [id (d/tempid :db.part/user)]\n    (d/transact\n      conn\n      [{:db/id id\n        :person/first-name \&quot;Alonzo\&quot;\n        :person/last-name \&quot;Church\&quot;}]))&quot; &quot;(def tid (d/tempid :db.part/user))&quot; &quot;(def transaction-result\n    (d/transact\n      conn\n      [{:db/id tid\n        :person/first-name \&quot;Alan\&quot;\n        :person/last-name \&quot;Kay\&quot;}]))&quot; &quot;(def real-id\n    (d/resolve-tempid (d/db conn)\n                     (:tempids @transaction-result)\n                     tid))&quot; &quot;(d/pull (d/db conn) '[*] real-id)&quot; &quot;(d/transact\n    conn\n    [{:db/id             #db/id[:db.part/user]\n      :person/first-name \&quot;John\&quot;\n      :person/last-name  \&quot;von Neumann\&quot;}])&quot; &quot;(let [person-id (d/tempid :db.part/user)\n        email-id (d/tempid :db.part/user)]\n    (d/transact\n      conn\n      [{:db/id             person-id\n        :person/first-name \&quot;Emil\&quot;\n        :person/last-name  \&quot;Post\&quot;\n        :person/email      [{:db/id         email-id\n                             :email/address \&quot;emil@email.com\&quot;}]}]))&quot; &quot;(d/q\n    '[:find ?email\n      :where\n      [?e :person/first-name \&quot;Emil\&quot;]\n      [?e :person/last-name \&quot;Post\&quot;]\n      [?e :person/email ?email-account]\n      [?email-account :email/address ?email]]\n    (d/db conn))&quot; &quot;(d/transact\n    conn\n    [{:db/id #db/id[:db.part/db]\n      :db/ident :person/birthplace\n      :db/valueType :db.type/string\n      :db/cardinality :db.cardinality/one\n      :db/doc \&quot;A person's birthplace\&quot;\n      ;; This last part installs the schema!\n      :db.install/_attribute :db.part/db}])&quot; &quot;(d/q\n    '[:find ?i\n      :where\n      [?a :db/valueType :db.type/string]\n      [?a :db/ident ?i]]\n    (d/db conn))&quot; &quot;(d/transact\n    conn\n    [[:db.fn/cas eid :person/first-name \&quot;Kovas\&quot; \&quot;Cthulhu\&quot;]])&quot; &quot;(d/transact\n    conn\n    [[:db.fn/cas eid :person/first-name \&quot;World Peace\&quot; \&quot;Cthulhu\&quot;]])&quot; &quot;(full-names (d/db conn))&quot; &quot;(def current-db (d/db conn))&quot; &quot;(def current-t (d/basis-t current-db))&quot; &quot;current-t&quot; &quot;(full-names (d/as-of current-db (- current-t 20)))&quot; &quot;(full-names (d/since current-db (- current-t 20)))&quot; &quot;(full-names (d/as-of\n                (d/since\n                  current-db\n                  (- current-t 20))\n                (- current-t 5)))&quot; &quot;(d/q '[:find ?ln ?timestamp ?tx\n         :where\n         [_ :person/last-name ?ln ?tx]\n         [?tx :db/txInstant ?timestamp]]\n       current-db)&quot; &quot;(d/pull current-db '[*] 13194139534316)&quot; &quot;(d/tx-&gt;t 13194139534316)&quot; &quot;(def result\n    (d/transact\n     conn\n     [{:db/id (d/tempid :db.part/user) :org/name \&quot;Immutable Stack 2\&quot;}\n      {:db/id (d/tempid :db.part/tx) :db/doc \&quot;Seems like a good idea\&quot;}]))&quot; &quot;(d/t-&gt;tx\n    (d/basis-t (d/basis-t (:db-after @result))))&quot; &quot;(d/t-&gt;tx\n    (d/basis-t (:db-after @result)))&quot; &quot;(let [db (:db-after @result)]\n    (d/pull\n     db\n     '[*]\n     (d/t-&gt;tx\n       (d/basis-t db))))&quot;], :remote []}}</component>
</project>